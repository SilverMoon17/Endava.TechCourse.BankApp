<h3>Wallet</h3>
@page "/wallets"
@layout PanelLayout
@inject HttpClient HttpClient
 
<PageTitle>All wallets</PageTitle>
 
 
<br />
<br />
 
<MudTable Items="@wallets">
	<HeaderContent>
		<MudTh>Type</MudTh>
		<MudTh>Amount</MudTh>
		<MudTh>Currency</MudTh>
		<MudTh>Info</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd>@context.Type</MudTd>
		<MudTd>@context.Amount</MudTd>
		<MudTd>@context.Currency</MudTd>
		<MudTd DataLabel="Info">
			<MudLink Href="@($"/wallet/{@context.Id}")">View info</MudLink>
		</MudTd>
		<MudTd DataLabel="Nr">
			<MudButton Color="Color.Error" OnClick="@((e) => DeleteWallet(context.Id))">Sterge</MudButton>
		</MudTd>
	</RowTemplate>
</MudTable>
<MudGrid Justify="Justify.FlexEnd" Class="mt-10">
	<MudItem>
		<MudLink Href="/createWallet"><MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Create" Color="Color.Success">Create new wallet</MudButton></MudLink>
	</MudItem>
</MudGrid>
@code {
	private List<WalletDto> wallets;

	private string newCurrencyError = string.Empty;
	private string deleteCurrencyError = string.Empty;
 
	protected override async Task OnInitializedAsync()
	{
		wallets = await HttpClient.GetFromJsonAsync<List<WalletDto>>($"api/wallet/getWalletsForUser");
	}

	public async Task DeleteWallet(string id)
	{
		await HttpClient.DeleteAsync($"api/Wallet/{id}");

		StateHasChanged();
	}
}